// Code generated by go-swagger; DO NOT EDIT.

package latch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Allen-Career-Institute/flagr/swagger_gen/models"
)

// CreateLatchOKCode is the HTTP code returned for type CreateLatchOK
const CreateLatchOKCode int = 200

/*
CreateLatchOK returns the created latch

swagger:response createLatchOK
*/
type CreateLatchOK struct {

	/*
	  In: Body
	*/
	Payload *models.Flag `json:"body,omitempty"`
}

// NewCreateLatchOK creates CreateLatchOK with default headers values
func NewCreateLatchOK() *CreateLatchOK {

	return &CreateLatchOK{}
}

// WithPayload adds the payload to the create latch o k response
func (o *CreateLatchOK) WithPayload(payload *models.Flag) *CreateLatchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create latch o k response
func (o *CreateLatchOK) SetPayload(payload *models.Flag) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLatchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateLatchDefault generic error response

swagger:response createLatchDefault
*/
type CreateLatchDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateLatchDefault creates CreateLatchDefault with default headers values
func NewCreateLatchDefault(code int) *CreateLatchDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateLatchDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create latch default response
func (o *CreateLatchDefault) WithStatusCode(code int) *CreateLatchDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create latch default response
func (o *CreateLatchDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create latch default response
func (o *CreateLatchDefault) WithPayload(payload *models.Error) *CreateLatchDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create latch default response
func (o *CreateLatchDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLatchDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
